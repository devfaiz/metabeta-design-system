$space-xxxs : .125rem;
$space-xxs : .25rem;
$space-xs : .5rem;
$space-s : .75rem;
$space-m : 1rem;
$space-l : 1.5rem;
$space-xl : 2rem;
$space-xxl : 3rem;
$space-xxxl : 4rem;

$max-window-width : 1600px;

/* MOBILE INTERFACE TOUCH SCREEEN VARIABLES START */

/* VARIABLE LIST IN CASE NEEDED START */

$space-list : (0: 0, xxs : $space-xxs, xs : $space-xxs, s: $space-s, m: $space-m, l: $space-l, xl: $space-xl, xxl: $space-xxl, xxxl: $space-xxxl);

/* VARIABLE LIST IN CASE NEEDED END */


$touch-base : 40px;
$touch-min : $space-xl;
$touch-max : $space-xxxl;

/* MOBILE INTERFACE TOUCH SCREEEN VARIABLES END */

/* BREAKPOINT VARIABLES START */

$mobile-breakpoint: 568px;
$tablet-breakpoint: 768px;
$laptop-breakpoint: 1367px;

$display-media-breakpoints: none,
flex,
block,
grid,
inline-block;

/* BREAKPOINT VARIABLES END */

/* ASPECT RATIO MIXIN START */

@mixin aspect-ratio($ratio, $width) {
  width: $width;

  @if $ratio==square {
    height: $width;
  }

  @else if $ratio==golden {
    height: $width * 0.618;
  }

  @else if $ratio==landscape {
    height: $width * 2 / 3;
  }

  @else if $ratio==portrait {
    height: $width * 3 / 2;
  }

  @else if $ratio==video {
    height: $width * 9 / 16;
  }
}

/* ASPECT RATIO MIXIN END */

/* BORDER RADIUS START */

@mixin border-radius($radius) {
  @if $radius==xs {
    border-radius: $space-xxxs;
  }

  @else if $radius==s {
    border-radius: $space-xxxs * 2;
  }

  @else if $radius==m {
    border-radius: $space-xxxs * 3;
  }

  @else if $radius==l {
    border-radius: $space-xxxs * 4;
  }

  @else if $radius==circle {
    border-radius: 50%;
  }
}

/* BORDER RADIUS END */

/* BREAKPOINTS START */

@mixin media($media) {
  @if $media==phone {
    @media only screen and (max-width: $mobile-breakpoint) {
      @content;
    }
  }

  @else if $media==tablet {
    @media only screen and (min-width: $mobile-breakpoint + 1) and (max-width: $tablet-breakpoint - 1) {
      @content;
    }
  }

  @else if $media==laptop {
    @media only screen and (min-width: $tablet-breakpoint) and (max-width: $laptop-breakpoint - 1) {
      @content;
    }
  }

  @else if $media==desktop {
    @media only screen and (min-width: $laptop-breakpoint) {
      @content;
    }
  }

  @else if $media==print {
    @media only print {

      button,
      input {
        display: none;
      }

      @content;
    }
  }

  @else {
    @media only screen and (min-width: $laptop-breakpoint) {
      @content;
    }
  }
}
.h-100{
  height: 100%;
}
.w-100{
  width: 100%;
}

/* BREAKPOINTS END */

/* CLEAR DISPLAY CLASS START */
@each $display-mobile in $display-media-breakpoints {
  @each $display-tablet in $display-media-breakpoints {
    @each $display-laptop in $display-media-breakpoints {
      @each $display-desktop in $display-media-breakpoints {
        .display-#{$display-desktop}-#{$display-laptop}-#{$display-tablet}-#{$display-mobile} {
          @include media(desktop) {
            display: $display-desktop;
          }

          @include media(laptop) {
            display: $display-laptop;
          }

          @include media(tablet) {
            display: $display-tablet;
          }

          @include media(desktop) {
            display: $display-mobile;
          }
        }
      }
    }
  }
}

/* CLEAR DISPLAY CLASS END */

/* GRID STARTS */

.mb-flex-container {
  max-width: calc(#{$max-window-width} - #{$space-xxxl});
  padding: 0 $space-l;
  @include media(phone) {
    max-width: calc(#{$mobile-breakpoint} - #{$space-m});
    padding: 0 $space-xs;
  }

  @include media(tablet) {
    max-width: calc(#{$tablet-breakpoint} - #{$space-xl});
    padding: 0 $space-s;
  }

  @include media(laptop) {
    max-width: calc(#{$laptop-breakpoint} - #{$space-xxl});
    padding: 0 $space-m;
  }
}

.mb-flex-row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 #{-$space-l};

  @include media(phone) {
    margin: 0 -$space-xs;
  }

  @include media(tablet) {
    margin: 0 -$space-s;
  }

  @include media(laptop) {
    margin: 0 -$space-m;
  }
}

@mixin fixed-flex($value) {
  flex-grow: $value;
  flex-shrink: 0;
}

@function get-col-percent($column-num) {
  @return 100% / $column-num;
}

$grid-columns : 4;

/* change the value above to your need it works based on how many pieces you'd like to seperate your grid */




@for $i from 1 through $grid-columns {
  @for $k from 1 through $grid-columns {
    @for $l from 1 through $grid-columns {
      @for $m from 1 through $grid-columns {
        .mb-col-#{$i}-#{$k}-#{$l}-#{$m} {
          position: relative;
          width: 100%;
          flex: 0 0 get-col-percent($i);
          max-width: get-col-percent($i);
          padding: 0 $space-l;

          @include media(phone) {
            flex: 0 0 get-col-percent($m);
            max-width: get-col-percent($m);
            padding: 0 $space-xs;
          }

          @include media(tablet) {
            flex: 0 0 get-col-percent($l);
            max-width: get-col-percent($l);
            padding: 0 $space-s;
          }

          @include media(laptop) {
            flex: 0 0 get-col-percent($k);
            max-width: get-col-percent($k);
            padding: 0 $space-m;
          }
        }
      }
    }
  }
}

@mixin grid-mixin($grid-number, $col-or-row, $grid-min-max : false, $grid-min-max-value : auto, $grid-min-max-direction : 'start') {
  display: grid;

  @if $grid-min-max {
    @if $col-or-row=='col' {
      @if $grid-min-max-direction=='end' {
        grid-template-columns: minmax(1fr * $grid-number, $grid-min-max-value);
      }

      @else {
        grid-template-columns: minmax($grid-min-max-value, 1fr * ($grid-number - 1));
      }
    }

    @else {
      @if $grid-min-max-direction=='end' {
        grid-template-rows: minmax(1fr * $grid-number, $grid-min-max-value);
      }

      @else {
        grid-template-rows: minmax($grid-min-max-value, 1fr * ($grid-number - 1));
      }
    }
  }

  @else {
    @if $col-or-row=='col' {
      grid-template-columns: 1fr * $grid-number;
    }

    @else {
      grid-template-rows: 1fr * $grid-number;
    }
  }
}

/* approach here is desktop first also why not trolling the letter "j" for a change :p */


/* GRID ENDS */

/* ELEVATION MIXIN START */

@mixin elevation($value) {
  z-index: $value * 100;
}

/* ELEVATION MIXIN END */

/* SHADOW MIXIN START */

@mixin shadow($elevation:0, $direction: "bottom", $color: $color-gray-100) {
  @if $direction=="left" {
    box-shadow: -$elevation/2 0 $elevation rgba($color, $opacity-m), 0 0 1px rgba($color, $opacity-m)
  }

  @if $direction=="right" {
    box-shadow: $elevation/2 0 $elevation rgba($color, $opacity-m), 0 0 1px rgba($color, $opacity-m)
  }

  @if $direction=="top" {
    box-shadow: 0 -$elevation/2 $elevation rgba($color, $opacity-m), 0 0 1px rgba($color, $opacity-m)
  }

  @else {
    box-shadow: 0 $elevation/2 $elevation rgba($color, $opacity-m), 0 0 1px rgba($color, $opacity-m)
  }
}

/* SHADOW MIXIN ENDD */


/* PADDING & MARGIN CLASSES START */

@each $vertical,
$vValue in $space-list {

  @each $horizontal,
  $hValue in $space-list {
    .padding-#{$vertical}-#{$horizontal} {
      padding: $vValue $hValue;
    }
  }
}

@each $vertical,
$vValue in $space-list {

  @each $horizontal,
  $hValue in $space-list {
    .margin-#{$vertical}-#{$horizontal} {
      margin: $vValue $hValue;
    }
  }
}

@each $top,
$tValue in $space-list {

  @each $right,
  $rValue in $space-list {

    @each $bottom,
    $bValue in $space-list {

      @each $left,
      $lValue in $space-list {
        .padding-#{$top}-#{$right}-#{$bottom}-#{$left} {
          padding: $tValue $rValue $bValue $lValue;
        }
      }
    }
  }
}

@each $top,
$tValue in $space-list {

  @each $right,
  $rValue in $space-list {

    @each $bottom,
    $bValue in $space-list {

      @each $left,
      $lValue in $space-list {
        .margin-#{$top}-#{$right}-#{$bottom}-#{$left} {
          margin: $tValue $rValue $bValue $lValue;
        }
      }
    }
  }
}

/* PADDING & MARGIN CLASSES END */